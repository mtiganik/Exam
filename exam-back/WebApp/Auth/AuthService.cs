using Domain.Identity;
using Microsoft.AspNetCore.Identity;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;
using Microsoft.IdentityModel.Tokens;
using Microsoft.VisualBasic;
using MigrationProject;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;
using WebApp.Auth.DTOs;

namespace WebApp.Auth
{
    public class AuthService : IAuthService
    {
        private readonly UserManager<AppUser> _userManager;
        private readonly AppDbContext _context;
        private readonly JwtAuthConfig _jwtAuthConfig;
        private readonly SignInManager<AppUser> _signInManager;

        public AuthService(UserManager<AppUser> userManager, AppDbContext context,
    IOptions<JwtAuthConfig> jwtAuthConfig, ILogger<AuthService> logger, SignInManager<AppUser> signInManager)
        {
            _userManager = userManager;
            _context = context;
            _jwtAuthConfig = jwtAuthConfig.Value;
            _signInManager = signInManager;
        }


        public async Task<JWTResponse> Login(LoginInfo model)
        {
            var appUser = await _userManager.FindByEmailAsync(model.Email!);
            if (appUser == null)
            {
                throw new Exception("User/Password problem");
            }

            // verify password
            var result = await _signInManager.CheckPasswordSignInAsync(appUser, model.Password!, false);
            if (!result.Succeeded)
            {
                throw new Exception("User/Password problem");
            }

            JWTResponse responseData = await CreateJWTResponseForExistingUser(appUser);
            return responseData;

        }

        public async Task<int> Logout(string userIdStr, string refreshToken)
        {
            if (Guid.TryParse(userIdStr, out var userId))
            {
                throw new Exception("Deserialization error");
            }
            var appUser = await _context.Users
                .Where(u => u.Id == userId)
                .SingleOrDefaultAsync();
            if (appUser == null)
            {
                new Exception("User/Password problem");
            }
            await _context.Entry(appUser)
                .Collection(u => u.RefreshTokens!)
                .Query()
                .Where(x =>
                    (x.RefreshToken == refreshToken) ||
                    (x.PreviousRefreshToken == refreshToken))
                .ToListAsync();

            foreach (var appRefreshToken in appUser!.RefreshTokens!)
            {
                _context.RefreshTokens.Remove(appRefreshToken);
            }

            var deleteCount = await _context.SaveChangesAsync();
            return deleteCount;

        }

        public Task<JWTResponse> RefreshToken(TokenRefreshInfo model)
        {
            throw new NotImplementedException();
        }

        public async Task<JWTResponse> Register(RegisterInfo model, string role)
        {
            var appUser = await _userManager.FindByEmailAsync(model.Email);
            if (appUser != null)
            {
                throw new Exception($"User with email {model.Email} is already registered");
            }

            (appUser, var refreshToken) = GenerateNewUserData(model);

            var result = await _userManager.CreateAsync(appUser, model.Password);
            if (!result.Succeeded)
            {
                throw new Exception(result.Errors.First().Description);
            }
            await _userManager.AddToRoleAsync(appUser, role);
            await _context.SaveChangesAsync();

            // get full user from system with fixed data (maybe there is something generated by identity that we might need
            appUser = await _userManager.FindByEmailAsync(appUser.Email!);
            if (appUser == null)
            {
                throw new Exception($"User with email {model.Email} is not found after registration");
            }
            JWTResponse res = await CreateJWTResponseForNewUser(appUser, refreshToken);

            return res;

        }


        private async Task<JWTResponse> CreateJWTResponseForExistingUser(AppUser? appUser)
        {
            var claimsPrincipal = await _signInManager.CreateUserPrincipalAsync(appUser!);
            if (claimsPrincipal == null)
            {
                throw new Exception("User/ password problem");
            }
            var deletedRows = await _context.RefreshTokens
                .Where(t => t.AppUserId == appUser.Id && t.ExpirationDT < DateTime.UtcNow)
                .ExecuteDeleteAsync();

            var refreshToken = new AppRefreshToken()
            {
                AppUserId = appUser.Id
            };
            _context.RefreshTokens.Add(refreshToken);
            await _context.SaveChangesAsync();
            var roles = await _userManager.GetRolesAsync(appUser);

            var jwt = GenerateJwt(claimsPrincipal.Claims, _jwtAuthConfig);
            var responseData = new JWTResponse()
            {
                Jwt = jwt,
                RefreshToken = refreshToken.RefreshToken,
                Email = appUser.Email!,
                UserName = appUser.UserName!,
                Role = roles.ToArray()
            };
            return responseData;
        }



        private async Task<JWTResponse> CreateJWTResponseForNewUser(AppUser? appUser, AppRefreshToken refreshToken)
        {
            var claimsPrincipal = await _signInManager.CreateUserPrincipalAsync(appUser);
            var jwt = GenerateJwt(claimsPrincipal.Claims, _jwtAuthConfig);
            var res = new JWTResponse()
            {
                Jwt = jwt,
                RefreshToken = refreshToken.RefreshToken,
                UserName = appUser.UserName!.Split("_")[0],
                Email = appUser.Email!,
            };
            return res;
        }


        private string GenerateJwt(IEnumerable<Claim> claims, JwtAuthConfig config)
        {
            var signingKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(config.Key!));
            var signingCredentials = new SigningCredentials(signingKey, SecurityAlgorithms.HmacSha256);
            var expires = DateTime.Now.AddSeconds(config.ExpiresInSeconds);
            var token = new JwtSecurityToken(
                issuer: config.Issuer,
                audience: config.Audience,
                claims: claims,
                expires: expires,
                signingCredentials: signingCredentials
                );
            return new JwtSecurityTokenHandler().WriteToken(token);
        }

        private bool ValidateJWT(string jwt, JwtAuthConfig config)
        {
            var validationParams = new TokenValidationParameters()
            {
                IssuerSigningKey = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(config.Key!)),
                ValidateIssuerSigningKey = true,
                ValidIssuer = config.Issuer,
                ValidAudience = config.Audience,
                ValidateAudience = true,
                ValidateLifetime = false
            };

            try
            {
                new JwtSecurityTokenHandler().ValidateToken(jwt, validationParams, out var validatedToken);
            }
            catch (Exception)
            {
                return false;
            }
            return true;
        }

        private (AppUser, AppRefreshToken) GenerateNewUserData(RegisterInfo model)
        {
            var refreshToken = new AppRefreshToken();
            var appUser = new AppUser()
            {
                //Id = Guid.NewGuid(),
                Email = model.Email,
                UserName = model.UserName,
                RefreshTokens = new List<AppRefreshToken>() { refreshToken },
                CompanyId = model.CompanyId,
                ActivityMinutes = 10
            };
            refreshToken.AppUser = appUser;
            return (appUser, refreshToken);
        }




    }
}
